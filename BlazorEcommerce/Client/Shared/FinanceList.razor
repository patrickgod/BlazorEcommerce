@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Spinner;


@using BlazorEcommerce.Shared.Models;

@inject IFinanceService FinanceService;
@inject IPersonService PersonService;
@implements IDisposable
@attribute [Authorize];
@inject CustomAuthStateProvider AuthStateProvider;
@inject NavigationManager NavigationManager;
@inject CustomAuthStateProvider AuthenticationStateProvider;


@{

    var SpecificCols = (new string[] { "FullName" });
}
<div  id="container">
    <div style="display:flex;justify-content:start;align-items:flex-start;">
        <h3><span>Ödeme Bilgileri</span></h3>
    </div>

    <div style="padding-top:10px;padding-bottom:10px;border-bottom:1px solid #bdbdbd">
        <SfComboBox TValue="string" Placeholder="Ay seçiniz" AllowFiltering="true" TItem="Month" @bind-Index="@currentMonthIndex" DataSource="@months">
            <ComboBoxEvents TItem="Month" TValue="string" ValueChange="@MonthComboboxValueChangeHandler"></ComboBoxEvents>
            <ComboBoxFieldSettings Text="Name" Value="Value"></ComboBoxFieldSettings>
        </SfComboBox>
    </div>
    
    <div style="padding-top:10px;padding-bottom:10px;border-bottom:1px solid grey;display:flex;justify-content:start;align-items:flex-start;flex-direction:column;font-weight:bold;font-size:12px">
        <div style="display:flex;justify-content:start;flex-direction:column;gap:1px;align-items:start;width:100%;">
            <span>Seçili öğrencinin ödeme gününü belirle </span>
            <span style="width:100%">
                @*<SfNumericTextBox ID="SelectedPersonDueDate" Width="50%" Min="1" Max="31" TValue="int?" ValidateOnInput="true"></SfNumericTextBox> *@
                <SfDatePicker ID="PersonNewDueDate" Width="50%"  Min='@MinDate' Max='@MaxDate' Enabled="true" ShowTodayButton="false"  ShowClearButton="true" AllowEdit="true"
                              Format="dd/MM/yyyy" TValue="DateTime?" Placeholder="Ödeme yapılan tarihi seçiniz!"> </SfDatePicker>
                <SfButton IsPrimary="true">Kaydet</SfButton>
            </span>
        </div>

        <div style="display:flex;justify-content:start;flex-direction:column;gap:1px;align-items:start;width:100%;padding-top:15px">
            <span>Tüm öğrencilerin ödeme gününü ötele </span>
            <span style="width:100%">
                @*<SfNumericTextBox ID="SelectedPersonDueDate" Width="50%" Min="1" Max="31" TValue="int?" ValidateOnInput="true"></SfNumericTextBox> *@
                <SfNumericTextBox ID="AllPersonDueDate" @bind-Value="allPersonDueDateOffset" Width="50%" Min="1" Max="31" TValue="int?" ValidateOnInput="true"></SfNumericTextBox>
                <SfButton OnClick="UpdateAllDueDate" IsPrimary="true">Kaydet</SfButton>
            </span>
        </div>
    </div>

    

    @*Main Grid*@
    <SfGrid @ref="gridfinance" DataSource="@FinanceService.Finance" EnableAdaptiveUI="true" AdaptiveUIMode="AdaptiveMode.Both" Width="%80" Height="%90"
            AllowPaging="true" AllowFiltering="true" AllowSorting=" true" AllowTextWrap="true" Toolbar="@(new List<string>() { "Edit","Update","Cancel" })">
        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem Type="ItemType.Input" Align="Syncfusion.Blazor.Navigations.ItemAlign.Right">
                    <Template>
                        <SfButton OnClick="RemoveFilter">Filtreleri Kaldır</SfButton>
                        <SfTextBox @ref="searchButton" Placeholder="Enter values to search" Input="OnInput"></SfTextBox>
                        <span style="padding-left:3px" class="e-search-icon e-icons"></span>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>

        <GridTextWrapSettings WrapMode="WrapMode.Both"></GridTextWrapSettings>
        <GridSearchSettings Fields=@SpecificCols Operator=Syncfusion.Blazor.Operator.Contains IgnoreCase="true" IgnoreAccent="true"></GridSearchSettings>
        <GridFilterSettings Type="@Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="false" Operators="Operator.Contains" Mode="FilterBarMode.Immediate" ImmediateModeDelay="500">
        </GridFilterSettings>
        <GridSortSettings>
            <GridSortColumns>
                <GridSortColumn Field="@nameof(FinanceDto.FullName)" Direction="Syncfusion.Blazor.Grids.SortDirection.Ascending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridPageSettings PageSize="15"></GridPageSettings>
        <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" Mode="EditMode.Normal">
            @*<Validator>
            <DataAnnotationsValidator></DataAnnotationsValidator>
            </Validator>*@
        </GridEditSettings>
        <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" RowSelected="RowSelectHandler" QueryCellInfo="CustomizeCell" TValue="FinanceDto"></GridEvents>


        <GridColumns>
            <GridColumn Field=@nameof(FinanceDto.FullName) AllowEditing="false" HeaderText="Ad Soyad" Width="150"></GridColumn>

            <GridColumn Field=@nameof(FinanceDto.Duedateday) AllowFiltering="false" AllowSorting="false" AllowEditing="true" EditType="EditType.NumericEdit"
                        HeaderText="Ödeme Günü" Width="120">
                <EditTemplate>
                    <SfNumericTextBox ID="OrderID" @bind-Value="@((context as FinanceDto).Duedateday)" Min="1" Max="31" TValue="int?" ValidateOnInput="true"></SfNumericTextBox>
                </EditTemplate>
            </GridColumn>

            <GridColumn Field=@nameof(FinanceDto.Paymentdate) AllowFiltering="false" AllowSorting="false" AllowEditing="true" EditType="EditType.DatePickerEdit" Format="dd/MM/yyyy"
                        Type="ColumnType.Date" HeaderText="Ödeme Tarihi" Width="120">
                <EditTemplate>
                    <SfDatePicker ID="OrderDate" @bind-Value="@((context as FinanceDto).Paymentdate)" Min='@MinDate' Max='@MaxDate' Enabled="true" ShowTodayButton="false" ShowClearButton="true" AllowEdit="true"
                                  Format="dd/MM/yyyy" TValue="DateTime?" Placeholder="Ödeme yapılan tarihi seçiniz!"> </SfDatePicker>
                </EditTemplate>
            </GridColumn>

            <GridColumn Field=@nameof(FinanceDto.Note) AllowFiltering="false" AllowSorting="false" AllowEditing="false" HeaderText="Ödeme Notları" Width="150" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(FinanceDto.Ispaid) AllowFiltering="false" AllowSorting="false" AllowEditing="true" DisplayAsCheckBox="true" MinWidth="10px" Width="80" MaxWidth="80" HeaderText="Ödendi Mi?">
                <HeaderTemplate>
                    @{
                        <SfTooltip>
                            <TooltipTemplates>
                                <Content>
                                    Ödendi Mi?
                                </Content>
                            </TooltipTemplates>
                            <span style="font-weight:bold;font-size:14px">Ödendi Mi?</span>
                        </SfTooltip>
                    }
                </HeaderTemplate>
                <FilterTemplate> <Syncfusion.Blazor.Buttons.SfCheckBox TChecked="bool" ValueChange="ValueChange"></Syncfusion.Blazor.Buttons.SfCheckBox>  </FilterTemplate>
                <Template>
                    @{
                        var value = (context as FinanceDto);
                        var result = (value.Ispaid) ? "Evet" : "Hayır";
                        <div style="display:flex;justify-content:start;align-items:center">
                            <span id="Emptext">@result</span>

                        </div>

                    }
                </Template>

            </GridColumn>

        </GridColumns>
        <SfSpinner @bind-Visible="@VisibleProperty"> </SfSpinner>
    </SfGrid>




</div>



@code {
    private bool VisibleProperty { get; set; } = false;


    SfGrid<FinanceDto>? gridfinance;
    //SfDatePicker<DateTime?> DatePicker { get; set; }
    SfTextBox searchButton = new SfTextBox();
    public FinanceDto SelectedData = new FinanceDto();

    public List<Month> months = new List<Month>();
    public List<int> years = new List<int>();
    private int? currentMonthIndex  = DateTime.Now.Month - 1;
    private int selectedMonth = DateTime.Now.Month;
    private int selectedYear = DateTime.Now.Year;

    public DateTime MinDate  = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 01);
    public DateTime MaxDate  = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 01);
    public DateTime MaxDateIteration = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 01);

    public int? allPersonDueDateOffset = null;


    public class Month{
        public int Value { get; set; }
        public string Name { get; set; }
    }

    protected override async void OnInitialized()
    {
        FinanceService.FinanceChanged += StateHasChanged;


    }
    public void Dispose()
    {
        FinanceService.FinanceChanged -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        this.VisibleProperty = true;
        years.Add(2023);
        years.Add(2024);
        months.Add(new Month { Value = 1, Name = "Ocak" });
        months.Add(new Month { Value = 2, Name = "Şubat" });
        months.Add(new Month { Value = 3, Name = "Mart" });
        months.Add(new Month { Value = 4, Name = "Nisan" });
        months.Add(new Month { Value = 5, Name = "Mayıs" });
        months.Add(new Month { Value = 6, Name = "Haziran" });
        months.Add(new Month { Value = 7, Name = "Temmuz" });
        months.Add(new Month { Value = 8, Name = "Ağustos" });
        months.Add(new Month { Value = 9, Name = "Eylül" });
        months.Add(new Month { Value = 10, Name = "Ekim" });
        months.Add(new Month { Value = 11, Name = "Kasım" });
        months.Add(new Month { Value = 12, Name = "Aralık" });


        var authState = await AuthStateProvider.IsAuthenticated();
        if (authState)
        {
            await GetData(this.selectedYear, this.selectedMonth);
        }
        else
        {
            NavigationManager.NavigateTo("/login");
            this.VisibleProperty = false;
        }

    }

    public async Task GetData(int year,int month)
    {
        var tokenExp = await AuthenticationStateProvider.GetTokenExpTime();
        Console.WriteLine(tokenExp);
        await FinanceService.GetFinanceList(year,month);

        this.VisibleProperty = false;

    }

    //Date picker actions
    public async void FocusHandler(Syncfusion.Blazor.Calendars.FocusEventArgs args)
    {
        //await this.DatePicker.ShowPopupAsync();
    }


    //ComboBox Events
    public async Task  MonthComboboxValueChangeHandler(ChangeEventArgs<string, Month> args)
    {
        if (args.Value != null && int.Parse(args.Value) != 0)
        {
            this.VisibleProperty = true;
            this.gridfinance.EditSettings.AllowEditing = false;
            this.selectedMonth = int.Parse(args.Value);
            await GetData(this.selectedYear,this.selectedMonth);
            this.gridfinance.EditSettings.AllowEditing = true;

            this.SetDatetimePicker();
        }
    }

    private void SetDatetimePicker()
    {
        try
        {
            this.MinDate = new DateTime(DateTime.Now.Year, this.selectedMonth, 01);
            var maxDay = DateTime.DaysInMonth(DateTime.Now.Year, this.selectedMonth);
            var maxDayIteration = maxDay;
            if(this.selectedMonth == 12)
            {
                maxDayIteration = DateTime.DaysInMonth(DateTime.Now.Year, 1);
            }

            this.MaxDate = new DateTime(DateTime.Now.Year, this.selectedMonth, maxDay);
            //this.MaxDateIteration = new DateTime(DateTime.Now.Year, this.selectedMonth+1, maxDay);
           
        }
        catch (Exception exp)
        {

            throw;
        }

    }

    //Grid Actions
    public void ValueChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        gridfinance.FilterByColumnAsync(nameof(FinanceDto.FullName), "equal", args.Checked);
    }


    public void RowSelectHandler(RowSelectEventArgs<FinanceDto> Args)
    {
        SelectedData = Args.Data;
    }

    public void CustomizeCell(QueryCellInfoEventArgs<FinanceDto> Args)
    {
        if (Args.Data.NotPaidPreviousmonth)
        {
            Args.Cell.AddStyle(new string[] { "background-color:#e5000073" });
        }
    }


    //Grid custom search
    public async Task OnInput(InputEventArgs Args)
    {
        await Task.Delay(500);
        if (!String.IsNullOrEmpty(Args.Value) && Args.Value.Count() > 1)
        {

            var normalizedValue = Args.Value.ToLower(new System.Globalization.CultureInfo("tr-TR"));
            //await gridfinance.FilterByColumnAsync("Personid", "Contains", normalizedValue); 
            await gridfinance.SearchAsync(normalizedValue);
        }
        else
            gridfinance.SearchAsync(null);
    }

    //Events and Custom CRUD actions
    public void RemoveFilter()
    {
        gridfinance.ClearFilteringAsync();
        gridfinance.Refresh();
        searchButton.Value = "";
        gridfinance.SearchAsync(null);


    }

    public async Task UpdateAllDueDate()
    {
        if(this.allPersonDueDateOffset != null){
            await FinanceService.UpdateAllPersonDueDateOffset(this.allPersonDueDateOffset.Value);
            gridfinance?.Refresh();
            gridfinance?.SearchAsync(null);
        }
        


    }

    

    public async Task ActionBeginHandler(ActionEventArgs<FinanceDto> Args)
    {

        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                //args.Cancel = true;
                //await FinanceService.CreatePerson(Args.Data);
                //await gridfinance.CloseEditAsync();
            }
            else
            {
                await FinanceService.UpdateFinance(Args.Data,false);
                await gridfinance.CloseEditAsync();
                //LibraryService.UpdateBook(Args.Data.Id, Args.Data);
            }
            GetData(this.selectedYear, this.selectedMonth);
        }

    }

    public void ActionCompleteHandler(ActionEventArgs<FinanceDto> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            GetData(this.selectedYear, this.selectedMonth);
        }
    }



}

<style>

    /*to style the alternate rows*/
    /*.e-grid .e-row.e-altrow {
        background-color: #dfdedc;
    }*/
    
    /*to style the remaining rows*/
    /*.e-grid .e-row {
        background-color: #dfdedc;
    }*/

    /*    .e-gridfinance .e-pagerexternalmsg {
            display: none;
        }

        .e-gridfinance .e-filterbar .e-filterbarcell .e-filterdiv .e-fltrinputdiv  {
            text-align: left !important;
        }

        .e-gridfinance .e-filterdiv .e-fltrinputdiv {
            text-align: left !important;
        }

        .e-gridfinance .e-fltrtempdiv{
            text-align: left !important;
        }

        .e-filterdiv e-fltrinputdiv{
            text-align: left !important;
        }*/


    .e-spinner-pane.e-customClass .e-spinner-inner .e-spin-material {
        stroke: #808080;
    }

    .e-custom {
        border-radius: 0;
        width: 25%;
    }

    .e-custom, .e-custom:hover, .e-custom:focus, .e-custom:active {
        background-color: #ff6e40;
        color: #fff;
    }

</style>
